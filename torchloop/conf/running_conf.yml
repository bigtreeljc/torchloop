run_helper:
  taskname: char_rnn_classify_langs_names
  device_name: cuda
  device_no: 0
  data_dir: data/langs_data 
  input_dim: 32
  output_dim: 32
  hidden_dim: 32
  n_layers: 1
  batch_size: 16 
  learning_rate: 0.0005
  optimizer: SGD
  n_iters: 100000
  print_every: 5000
  plot_every: 1000
  matplot: 1
  print_formatter_cls: util.formatter.default_format
  mode: train  # or test or infer
  model_store_dir: model_stored
# modules starts here
device:
  device_name: cuda
  device_no: 0
networks:
  - nn_cls: torchloop.nn.char_rnn
    input_dim: 32
    output_dim: 32
    hidden_dim: 32
    n_layers: 1
optimizer:
  - optimizer_name: SGD
    learning_rate: 0.0005
    batch_size: 32
operation:
  mode: train
  matplot: 0
train:
  trainer_cls: torchloop.train.char_rnn_trainer
  n_iters: 1000
  print_every: 5000
  plot_every: 1000
  format_cls: util.formatter.default_format
infer:
  inferer_cls: torchloop.infer.char_rnn_inferer
  input_type: stdin # or input file
test:
  tester_cls: torchloop.test.char_rnn_tester
persist:
  dir: model_store_dir
  persister_cls: torchloop.persister.char_rnn_persister
data_loader:
  data_loader_cls: torchloop.data_loader.langs_data_loader
model_loader:
  # if mode consists of load it is useful 
  # if mode conststs of train or even load and train it will be discarded
  model_loader_cls: torchloop.model_loader.char_rnn_loader
  naming_strategy: torchloop.util.naming_strategy.char_rnn_naming_strategy
